name: 'Release a new version'

on:
  workflow_dispatch:

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_SCOPE: '1212evgen'

jobs:
  release:
    name: 'Release'
    runs-on: ubuntu-latest

    steps:
      - name: 'Generate Github token'
        uses: actions/create-github-app-token@v1
        id: 'app-token'
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 'Install NPM packages (global)'
        run: |
          npm install --global \
            vercel@33.2 \
            semantic-release@22 \
            @semantic-release/git@10 \
            @semantic-release/changelog@6 \
            @semantic-release/exec@6 \
            conventional-changelog-conventionalcommits@7 \    

      - name: 'Generate `semantic-release` config'
        run: |
          cat <<EOF | tee .releaserc
          {
            "branches": ["main"],
            "plugins": [
              ["@semantic-release/commit-analyzer", {
                "preset": "conventionalcommits",
              }],
              ["@semantic-release/release-notes-generator", {
                "preset": "conventionalcommits",
                "presetConfig": {
                  "issuePrefixes": ["AMA-"],
                  "issueUrlFormat": "https://amatechs.atlassian.net/browse/{{prefix}}{{id}}"
                },
              }],
              "@semantic-release/changelog",
              "@semantic-release/npm",
              "@semantic-release/git",
              ["@semantic-release/github", {
                "assets": [
                  { "path": "build.tar.gz", "name": "\${nextRelease.gitTag}.tar.gz", "label": "Build (tar.gz)" }
                ]
              }],
              ["@semantic-release/exec", {
                "verifyReleaseCmd": "echo NEXT_RELEASE_VERSION=\${nextRelease.version} >> \$GITHUB_ENV",
                "successCmd": "echo \${ nextRelease.version } > .release-version"
              }]
            ]
          }
          EOF

      - name: 'Get the nextRelease.version from semantic release'
        run: semantic-release --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'GITHUB_CONTEXT'
        run: echo "$GITHUB_CONTEXT"

      - name: 'Capture Next Version'
        run: echo "BUILD_ID=${{env.NEXT_RELEASE_VERSION}}" >> $GITHUB_ENV

      - name: 'Pull Vercel project settings'
        run: vercel pull --environment=production --yes --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ env.VERCEL_SCOPE }}

      - name: 'Build project artifacts'
        run: |
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ env.VERCEL_SCOPE }}
          (cd .vercel/output && tar -czf ../../build.tar.gz .)

      - name: 'Release'
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Verify release'
        run: |
          cat .release-version 2> /dev/null | head -n 1 | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' \
            || (echo "Release is not successful." && exit 1)
