name: 'Deploy to staging'

on:
  workflow_dispatch:
  push:
      branches:
        - main

jobs:
  frontend-build-and-deploy:
    name: 'Deploy (staging)'
    runs-on: ubuntu-latest

    environment:
      name: 'production'

    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_SCOPE: 1212evgen

    steps:
      - name: 'Generate Github token'
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: 'Setup Node.js v20'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 'Install dependencies'
        run: |
          npm install --global \
            vercel@33 \
            semantic-release@22 \
            @semantic-release/git@10 \
            @semantic-release/changelog@6 \
            @semantic-release/exec@6 \
            conventional-changelog-conventionalcommits@7 \

      - name: 'Pull Vercel project settings'
        run: vercel pull --environment=production --yes --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ env.VERCEL_SCOPE }}

      - name: 'Build project artifacts'
        run: |
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ env.VERCEL_SCOPE }}
          (cd .vercel/output && zip ../../build.zip . -r)

      - name: 'Deploy project artifacts to Vercel'
        id: vercel-deploy
        run: |
          deploymentUrl=$(vercel deploy --prod --prebuilt --archive=tgz --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ env.VERCEL_SCOPE }})
          echo "deployment-url=$deploymentUrl" >> $GITHUB_OUTPUT

      - name: 'Assign domains'
        run: vercel alias set ${{ steps.vercel-deploy.outputs.deployment-url }} test-vercel-org-stage.vercel.app --token=${{ secrets.VERCEL_TOKEN }} --scope=1212evgen
